// #![extern_module(global=true)]

extern pkg core;

// mod asset_manager;

use core::fs;
use core::io as lua_io;
use love::filesystem::*;
use love::graphics::{ draw, draw_arc };

use pkg::asset_manager::AssetManager;

mod tests {
    use core::testing::assert;

    fn test0() {
        $assert(0x1 == -0x1 && true || false);
    }
}

// @lua_symbol(name="require")
fn require(path: string) any;

var my_var = 9;
var myvar2, myvar3 = (1, 2, 3);

const ALPHA = 0b00101010110101;

class Item {}

pub fn sumtype(x: int | string | Item) {}

pub enum WorldLevel {
    overworld,
    midgard,
    underworld,
    undefined = 0xFF

    fn from_string(s: string) Self {
        unsafe {
            $lua("function x() end");
        }
        return match s {
            "overworld" => .overworld,
            "midgard" => .midgard,
            "underworld" => .underworld,
            else => .undefined
        };
    }
}

// @abstract
class Person {
    name: string;
    age: int = 15;

    items: []Item = [Item()];
    magic: [4]int = #[1, 2, 3, 4];

    var static_var = nil;
    const MAX = 999;

    map: {string:int} = {
        "First Key": 99,
        "Second Key": 100
    };

    tuple: (int, ?string) = (1, nil);

    fn setAge(self, age: int) {
        self.age = age;
    }

    fn mkdir(path: lua::string = ".") int {
        $assert(path);
    }
}

fn init(verbose: bool = 2004 != 2004, year: int = 2004) {
    const age = 9;

    var w = WorldLevel.midgard;
    w = .undefined;

    var x = 666.0e4;
    var a = 123;
    var q, m, c = (99, true, nil);
    var name = "StunxFS";
    name = 999;
    // println("Hello World!");
    _ = math::pow(2);
    mod.my_func();

    var len = $len("");
    // for elem in arr {}
    // for i in 0..$len(arr) {}

    if true {
        q = 3;
    } else if len == 0 {
        return 99 + 99;
    } else {
        return error("oops");
    }

    if false {
        s = if true {
            99
        } else if 99 {
            99
        } else {
            100
        };
    }

    while true {
        m += 4;
    }

    match name {
        "holaa" => m = 99,
        "wb", "js" => m = 1000,
        else => {
            exit(0)
        }
    }

    var b = true;
    match {
        b => true,
        else => false
    }
}

fn div(a: int, b: int) int {
    if a == 0 || b == 0 {
        return error("division by zero");
    }
    return a / b;
}

fn loop(max: int) {
    var i = 0;
    while i < max {
        i += 1;
    }
    $assert(i == max);
}

fn comptime() int {
    return 4 + 4;
}

fn add_int(a: int) int {
    return a + a;
}

fn add_float(a: float) float {
    return a + a;
}

