// Copyright (C) 2024 Jose Mendoza. All rights reserved. Use of this
// source code is governed by an MIT license that can be found in the
// LICENSE file.

%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.NUMBER
%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.WS

%ignore CPP_COMMENT
%ignore C_COMMENT
%ignore WS

module: extern_pkg* decl*

// Declarations

?decl: use_decl
       | mod_decl
       | var_decl
       | const_decl
       | enum_decl
       | class_decl
       | fn_decl

extern_pkg: KW_EXTERN KW_PKG NAME [KW_AS NAME] SEMICOLON

use_decl: [access_modifier] KW_USE use_tree SEMICOLON
use_tree: path_expr DOUBLE_COLON MUL
       | path_expr DOUBLE_COLON LBRACE [use_tree (COMMA use_tree)*] RBRACE
       | path_expr [KW_AS NAME]

mod_decl: [access_modifier] KW_MOD NAME (LBRACE decl* RBRACE | SEMICOLON)

const_decl: [access_modifier] KW_CONST NAME [COLON type_decl] OP_ASSIGN expr SEMICOLON

var_decl: [access_modifier] KW_VAR var_ident (COMMA var_ident)* OP_ASSIGN expr SEMICOLON
var_ident: NAME [COLON type_decl]

enum_decl: [access_modifier] KW_ENUM NAME LBRACE enum_fields decl* RBRACE
enum_fields: enum_field (COMMA enum_field)*
enum_field: NAME [OP_ASSIGN expr]

class_decl: [access_modifier] KW_CLASS NAME LBRACE (class_field | decl)* RBRACE
class_field: [access_modifier] NAME COLON type_decl [OP_ASSIGN expr] SEMICOLON

fn_decl: [access_modifier] KW_FN NAME LPAREN [fn_args] RPAREN [BANG? type_decl] (SEMICOLON | block)
fn_args: (KW_SELF | fn_arg) (COMMA fn_arg)*
fn_arg: NAME COLON type_decl [OP_ASSIGN expr]

access_modifier: KW_PUB [LPAREN KW_PKG RPAREN] | KW_PROT

?type_decl: path_expr -> user_type_decl
       | QUESTION type_decl -> option_type_decl
       | LBRACKET expr? RBRACKET type_decl -> array_type_decl
       | LBRACE type_decl COLON type_decl RBRACE -> table_type_decl
       | type_decl PIPE type_decl (PIPE type_decl)* -> sum_type_decl
       | LPAREN type_decl COMMA type_decl (COMMA type_decl)* RPAREN -> tuple_type_decl

// Statements

?stmt: block_stmt
       | var_decl
       | const_decl
       | while_stmt
       | match_stmt
       | if_stmt
       | expr_stmt SEMICOLON

block: LBRACE stmt* RBRACE // returns array of stmts in AstGen
block_expr: [KW_UNSAFE] LBRACE stmt* [expr] RBRACE // returns BlockExpr in AstGen
block_stmt: block_expr

expr_stmt: expr
while_stmt: KW_WHILE expr block
match_stmt: match_expr
if_stmt: if_expr

// Expressions

?expr: or_expr
or_expr: and_expr | or_expr LOGICAL_OR and_expr
and_expr: compare_expr | and_expr LOGICAL_AND compare_expr
compare_expr: bitwise_expr | compare_expr compare_op bitwise_expr
bitwise_expr: bitshift_expr | bitwise_expr bitwise_op bitshift_expr
bitshift_expr: addition_expr | bitshift_expr bitshift_op addition_expr
addition_expr: multiply_expr | addition_expr addition_op multiply_expr
multiply_expr: unary_expr | multiply_expr multiply_op unary_expr
unary_expr: unary_op primary_expr | primary_expr
?primary_expr: par_expr
       | assignment
       | return_expr
       | match_expr
       | if_expr
       | block_expr
       | expr LPAREN [expr (COMMA expr)*] RPAREN -> call_expr
       | LPAREN expr (COMMA expr)* RPAREN -> tuple_literal
       | LBRACE expr COLON expr (COMMA expr COLON expr)* RBRACE -> table_literal
       | [HASH] LBRACKET [expr (COMMA expr)*] RBRACKET -> array_literal
       | DOT NAME -> enum_literal
       | path_expr
       | expr DOT NAME -> selector_expr
       | DOLLAR NAME -> builtin_var
       | literal

compare_op: LT | GT | LE | GE | EQ | NEQ
bitwise_op: BIT_AND | BIT_OR | BIT_XOR
bitshift_op: LSHIFT | RSHIFT
addition_op: PLUS | MINUS
multiply_op: MUL | DIV | MOD
unary_op: BANG | BIT_NOT | MINUS

par_expr: LPAREN expr RPAREN

assignment: expr (COMMA expr)* assign_op expr
assign_op: OP_ASSIGN
       | OP_ASSIGN
       | OP_PLUS_ASSIGN
       | OP_MINUS_ASSIGN
       | OP_DIV_ASSIGN
       | OP_MUL_ASSIGN
       | OP_MOD_ASSIGN
       | OP_BIT_AND_ASSIGN
       | OP_BIT_OR_ASSIGN
       | OP_BIT_XOR_ASSIGN

path_expr: NAME (DOUBLE_COLON NAME)*

if_expr: if_header else_if_expr* else_stmt?
if_header: KW_IF expr expr
else_if_expr: KW_ELSE KW_IF expr block_expr
else_stmt: KW_ELSE block_expr

match_expr: KW_MATCH [expr] LBRACE match_branches RBRACE
?match_branches: match_branch (COMMA match_branch)*
match_branch: expr (COMMA expr)* ARROW expr
       | KW_ELSE ARROW expr

return_expr: KW_RETURN [expr]

?literal: KW_NIL
       | BOOL_LIT
       | number_lit
       | STRING
       | KW_SELF
       | NAME
BOOL_LIT: KW_TRUE | KW_FALSE
number_lit: BIN_NUMBER | OCT_NUMBER | HEX_NUMBER | NUMBER

// Tokens

BIN_NUMBER.2: /0b[0-1]*l?/i
OCT_NUMBER.2: /0o[0-7]*l?/i
HEX_NUMBER.2: /0x[\da-f]*l?/i

PLUS: "+"
MINUS: "-"
MUL: "*"
DIV: "/"
MOD: "%"
AT: "@"
DOLLAR: "$"
HASH: "#"
SLASH: "/"
ARROW: "=>"
COMMA: ","
DOT: "."
SEMICOLON: ";"
DOUBLE_COLON: "::"
COLON: ":"
BANG: "!"
QUESTION: "?"
PIPE: "|"
LSHIFT: "<<"
RSHIFT: ">>"
EQ: "=="
NEQ: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="
LOGICAL_OR: "||"
LOGICAL_AND: "&&"
BIT_AND: "&"
BIT_OR: "|"
BIT_XOR: "^"
BIT_NOT: "~"

LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
LBRACKET: "["
RBRACKET: "]"

OP_ASSIGN: "="
OP_PLUS_ASSIGN: "+="
OP_MINUS_ASSIGN: "-="
OP_DIV_ASSIGN: "/="
OP_MUL_ASSIGN: "*="
OP_MOD_ASSIGN: "%="
OP_BIT_AND_ASSIGN: "&="
OP_BIT_OR_ASSIGN: "|="
OP_BIT_XOR_ASSIGN: "^="

KW_AS.5: "as"
KW_CLASS.5: "class"
KW_CONST.5: "const"
KW_ELSE.5: "else"
KW_ENUM.5: "enum"
KW_EXTERN.5: "extern"
KW_FALSE.5: "false"
KW_FN.5: "fn"
KW_IF.5: "if"
KW_MATCH.5: "match"
KW_MOD.5: "mod"
KW_NIL.5: "nil"
KW_PKG.5: "pkg"
KW_PROT.5: "prot"
KW_PUB.5: "pub"
KW_RETURN.5: "return"
KW_SELF.5: "self"
KW_TRUE.5: "true"
KW_USE.5: "use"
KW_UNSAFE.5: "unsafe"
KW_VAR.5: "var"
KW_WHILE.5: "while"
